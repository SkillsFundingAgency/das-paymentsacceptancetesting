// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.1.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SFA.DAS.Payments.AcceptanceTests.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Manual adjustments as a result of payment anomolies")]
    [NUnit.Framework.CategoryAttribute("ManualAdjustments")]
    public partial class ManualAdjustmentsAsAResultOfPaymentAnomoliesFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "manual_adjustments.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-GB"), "Manual adjustments as a result of payment anomolies", null, ProgrammingLanguage.CSharp, new string[] {
                        "ManualAdjustments"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("893-AC01 Levy apprentice, deleted learner, transaction added for reversal")]
        public virtual void _893_AC01LevyApprenticeDeletedLearnerTransactionAddedForReversal()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("893-AC01 Levy apprentice, deleted learner, transaction added for reversal", ((string[])(null)));
#line 4
  this.ScenarioSetup(scenarioInfo);
#line 6
  testRunner.Given("The learner is programme only DAS", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 7
        testRunner.And("levy balance > agreed price for all months", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 8
        testRunner.And("the apprenticeship funding band maximum is 9000", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table628 = new TechTalk.SpecFlow.Table(new string[] {
                        "commitment Id",
                        "version Id",
                        "ULN",
                        "start date",
                        "end date",
                        "framework code",
                        "programme type",
                        "pathway code",
                        "agreed price",
                        "status",
                        "effective from",
                        "effective to"});
            table628.AddRow(new string[] {
                        "1",
                        "1",
                        "learner a",
                        "01/05/2017",
                        "01/05/2018",
                        "403",
                        "2",
                        "1",
                        "9000",
                        "Active",
                        "01/05/2017",
                        ""});
#line 10
        testRunner.And("the following commitments exist:", ((string)(null)), table628, "And ");
#line hidden
            TechTalk.SpecFlow.Table table629 = new TechTalk.SpecFlow.Table(new string[] {
                        "ULN",
                        "start date",
                        "aim sequence number",
                        "aim type",
                        "aim reference",
                        "framework code",
                        "programme type",
                        "pathway code",
                        "completion status"});
            table629.AddRow(new string[] {
                        "learner a",
                        "06/05/2017",
                        "1",
                        "programme",
                        "ZPROG001",
                        "403",
                        "2",
                        "1",
                        "continuing"});
#line 14
        testRunner.And("following learning has been recorded for previous payments:", ((string)(null)), table629, "And ");
#line hidden
            TechTalk.SpecFlow.Table table630 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "05/17",
                        "06/17",
                        "07/17",
                        "08/17"});
            table630.AddRow(new string[] {
                        "Provider Earned Total",
                        "600",
                        "600",
                        "0",
                        "0"});
            table630.AddRow(new string[] {
                        "Provider Earned from SFA",
                        "600",
                        "600",
                        "0",
                        "0"});
            table630.AddRow(new string[] {
                        "Provider Earned from Employer",
                        "0",
                        "0",
                        "0",
                        "0"});
            table630.AddRow(new string[] {
                        "Provider Paid by SFA",
                        "0",
                        "600",
                        "600",
                        "0"});
            table630.AddRow(new string[] {
                        "Payment due from Employer",
                        "0",
                        "0",
                        "0",
                        "0"});
            table630.AddRow(new string[] {
                        "Levy account debited",
                        "0",
                        "600",
                        "600",
                        "0"});
            table630.AddRow(new string[] {
                        "SFA Levy employer budget",
                        "600",
                        "600",
                        "0",
                        "0"});
            table630.AddRow(new string[] {
                        "SFA Levy co-funding budget",
                        "0",
                        "0",
                        "0",
                        "0"});
            table630.AddRow(new string[] {
                        "SFA Levy additional payments budget",
                        "0",
                        "0",
                        "0",
                        "0"});
            table630.AddRow(new string[] {
                        "SFA non-Levy co-funding budget",
                        "0",
                        "0",
                        "0",
                        "0"});
#line 18
        testRunner.And("the following programme earnings and payments have been made to the provider A fo" +
                    "r learner a:", ((string)(null)), table630, "And ");
#line hidden
            TechTalk.SpecFlow.Table table631 = new TechTalk.SpecFlow.Table(new string[] {
                        "Payment type",
                        "05/17",
                        "06/17"});
            table631.AddRow(new string[] {
                        "On-program",
                        "600",
                        "0"});
            table631.AddRow(new string[] {
                        "Completion",
                        "0",
                        "0"});
            table631.AddRow(new string[] {
                        "Balancing",
                        "0",
                        "0"});
            table631.AddRow(new string[] {
                        "Employer 16-18 incentive",
                        "0",
                        "0"});
            table631.AddRow(new string[] {
                        "Provider 16-18 incentive",
                        "0",
                        "0"});
            table631.AddRow(new string[] {
                        "Framework uplift on-program",
                        "0",
                        "0"});
            table631.AddRow(new string[] {
                        "Framework uplift completion",
                        "0",
                        "0"});
            table631.AddRow(new string[] {
                        "Framework uplift balancing",
                        "0",
                        "0"});
            table631.AddRow(new string[] {
                        "Provider disadvantage uplift",
                        "0",
                        "0"});
#line 31
  testRunner.And("the following payments will be added for reversal:", ((string)(null)), table631, "And ");
#line hidden
            TechTalk.SpecFlow.Table table632 = new TechTalk.SpecFlow.Table(new string[] {
                        "ULN",
                        "learner type",
                        "aim sequence number",
                        "aim type",
                        "aim reference",
                        "aim rate",
                        "agreed price",
                        "start date",
                        "planned end date",
                        "actual end date",
                        "completion status",
                        "framework code",
                        "programme type",
                        "pathway code"});
            table632.AddRow(new string[] {
                        "learner b",
                        "programme only DAS",
                        "1",
                        "programme",
                        "ZPROG001",
                        "",
                        "9000",
                        "06/05/2017",
                        "20/05/2018",
                        "",
                        "continuing",
                        "401",
                        "2",
                        "1"});
#line 44
        testRunner.When("an ILR file is submitted for the first time on 31/07/17 with the following data:", ((string)(null)), table632, "When ");
#line hidden
            TechTalk.SpecFlow.Table table633 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "05/17",
                        "06/17",
                        "07/17",
                        "08/17",
                        "09/17",
                        "10/17"});
            table633.AddRow(new string[] {
                        "Provider Earned Total",
                        "600",
                        "600",
                        "600",
                        "600",
                        "600",
                        "600"});
            table633.AddRow(new string[] {
                        "Provider Earned from SFA",
                        "600",
                        "600",
                        "600",
                        "600",
                        "600",
                        "600"});
            table633.AddRow(new string[] {
                        "Provider Earned from Employer",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
            table633.AddRow(new string[] {
                        "Provider Paid by SFA",
                        "0",
                        "600",
                        "600",
                        "0",
                        "0",
                        "0"});
            table633.AddRow(new string[] {
                        "Refund taken by SFA",
                        "0",
                        "0",
                        "0",
                        "-1200",
                        "0",
                        "0"});
            table633.AddRow(new string[] {
                        "Payment due from Employer",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
            table633.AddRow(new string[] {
                        "Refund due to employer",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
            table633.AddRow(new string[] {
                        "Levy account debited",
                        "0",
                        "600",
                        "600",
                        "0",
                        "0",
                        "0"});
            table633.AddRow(new string[] {
                        "Levy account credited",
                        "0",
                        "0",
                        "0",
                        "1200",
                        "0",
                        "0"});
            table633.AddRow(new string[] {
                        "SFA Levy employer budget",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
            table633.AddRow(new string[] {
                        "SFA Levy co-funding budget",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
            table633.AddRow(new string[] {
                        "SFA Levy additional payments budget",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
            table633.AddRow(new string[] {
                        "SFA non-Levy co-funding budget",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
            table633.AddRow(new string[] {
                        "SFA non-Levy additional payments budget",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
#line 48
        testRunner.Then("the provider earnings and payments break down as follows:", ((string)(null)), table633, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("893-AC02 non levy apprentice, changes to levy after payments are made in previous" +
            " months, non levy will be all reversed and new paymenst will be made for levy")]
        public virtual void _893_AC02NonLevyApprenticeChangesToLevyAfterPaymentsAreMadeInPreviousMonthsNonLevyWillBeAllReversedAndNewPaymenstWillBeMadeForLevy()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("893-AC02 non levy apprentice, changes to levy after payments are made in previous" +
                    " months, non levy will be all reversed and new paymenst will be made for levy", ((string[])(null)));
#line 66
 this.ScenarioSetup(scenarioInfo);
#line 68
  testRunner.Given("The learner is programme only DAS", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 69
        testRunner.And("levy balance > agreed price for all months", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 70
        testRunner.And("the apprenticeship funding band maximum is 9000", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table634 = new TechTalk.SpecFlow.Table(new string[] {
                        "commitment Id",
                        "version Id",
                        "ULN",
                        "start date",
                        "end date",
                        "framework code",
                        "programme type",
                        "pathway code",
                        "agreed price",
                        "status",
                        "effective from",
                        "effective to"});
            table634.AddRow(new string[] {
                        "1",
                        "1",
                        "learner a",
                        "01/05/2017",
                        "01/05/2018",
                        "403",
                        "2",
                        "1",
                        "9000",
                        "Active",
                        "01/05/2017",
                        ""});
#line 72
        testRunner.And("the following commitments exist:", ((string)(null)), table634, "And ");
#line hidden
            TechTalk.SpecFlow.Table table635 = new TechTalk.SpecFlow.Table(new string[] {
                        "ULN",
                        "learner type",
                        "start date",
                        "aim sequence number",
                        "aim type",
                        "aim reference",
                        "framework code",
                        "programme type",
                        "pathway code",
                        "completion status"});
            table635.AddRow(new string[] {
                        "learner a",
                        "programme only non-DAS",
                        "06/05/2017",
                        "1",
                        "programme",
                        "ZPROG001",
                        "403",
                        "2",
                        "1",
                        "continuing"});
#line 76
        testRunner.And("following learning has been recorded for previous payments:", ((string)(null)), table635, "And ");
#line hidden
            TechTalk.SpecFlow.Table table636 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "05/17",
                        "06/17",
                        "07/17",
                        "08/17"});
            table636.AddRow(new string[] {
                        "Provider Earned Total",
                        "600",
                        "600",
                        "0",
                        "0"});
            table636.AddRow(new string[] {
                        "Provider Earned from SFA",
                        "540",
                        "540",
                        "0",
                        "0"});
            table636.AddRow(new string[] {
                        "Provider Earned from Employer",
                        "60",
                        "60",
                        "0",
                        "0"});
            table636.AddRow(new string[] {
                        "Provider Paid by SFA",
                        "0",
                        "540",
                        "540",
                        "0"});
            table636.AddRow(new string[] {
                        "Payment due from Employer",
                        "0",
                        "60",
                        "60",
                        "0"});
            table636.AddRow(new string[] {
                        "Levy account debited",
                        "0",
                        "0",
                        "0",
                        "0"});
            table636.AddRow(new string[] {
                        "SFA Levy employer budget",
                        "0",
                        "0",
                        "0",
                        "0"});
            table636.AddRow(new string[] {
                        "SFA Levy co-funding budget",
                        "0",
                        "0",
                        "0",
                        "0"});
            table636.AddRow(new string[] {
                        "SFA Levy additional payments budget",
                        "0",
                        "0",
                        "0",
                        "0"});
            table636.AddRow(new string[] {
                        "SFA non-Levy co-funding budget",
                        "540",
                        "540",
                        "0",
                        "0"});
#line 80
        testRunner.And("the following programme earnings and payments have been made to the provider A fo" +
                    "r learner a:", ((string)(null)), table636, "And ");
#line hidden
            TechTalk.SpecFlow.Table table637 = new TechTalk.SpecFlow.Table(new string[] {
                        "Payment type",
                        "05/17",
                        "06/17"});
            table637.AddRow(new string[] {
                        "On-program",
                        "600",
                        "600"});
            table637.AddRow(new string[] {
                        "Completion",
                        "0",
                        "0"});
            table637.AddRow(new string[] {
                        "Balancing",
                        "0",
                        "0"});
            table637.AddRow(new string[] {
                        "Employer 16-18 incentive",
                        "0",
                        "0"});
            table637.AddRow(new string[] {
                        "Provider 16-18 incentive",
                        "0",
                        "0"});
            table637.AddRow(new string[] {
                        "Framework uplift on-program",
                        "0",
                        "0"});
            table637.AddRow(new string[] {
                        "Framework uplift completion",
                        "0",
                        "0"});
            table637.AddRow(new string[] {
                        "Framework uplift balancing",
                        "0",
                        "0"});
            table637.AddRow(new string[] {
                        "Provider disadvantage uplift",
                        "0",
                        "0"});
#line 93
  testRunner.And("the following payments will be added for reversal:", ((string)(null)), table637, "And ");
#line hidden
            TechTalk.SpecFlow.Table table638 = new TechTalk.SpecFlow.Table(new string[] {
                        "ULN",
                        "learner type",
                        "aim sequence number",
                        "aim type",
                        "aim reference",
                        "aim rate",
                        "agreed price",
                        "start date",
                        "planned end date",
                        "actual end date",
                        "completion status",
                        "framework code",
                        "programme type",
                        "pathway code"});
            table638.AddRow(new string[] {
                        "learner a",
                        "programme only DAS",
                        "1",
                        "programme",
                        "ZPROG001",
                        "",
                        "9000",
                        "06/05/2017",
                        "20/05/2018",
                        "",
                        "continuing",
                        "403",
                        "2",
                        "1"});
#line 105
        testRunner.When("an ILR file is submitted for the first time on 31/07/17 with the following data:", ((string)(null)), table638, "When ");
#line hidden
            TechTalk.SpecFlow.Table table639 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "05/17",
                        "06/17",
                        "07/17",
                        "08/17",
                        "09/17",
                        "10/17"});
            table639.AddRow(new string[] {
                        "Provider Earned Total",
                        "600",
                        "600",
                        "600",
                        "600",
                        "600",
                        "600"});
            table639.AddRow(new string[] {
                        "Provider Earned from SFA",
                        "600",
                        "600",
                        "600",
                        "600",
                        "600",
                        "600"});
            table639.AddRow(new string[] {
                        "Provider Earned from Employer",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
            table639.AddRow(new string[] {
                        "Provider Paid by SFA",
                        "0",
                        "540",
                        "540",
                        "0",
                        "0",
                        "0"});
            table639.AddRow(new string[] {
                        "Refund taken by SFA",
                        "0",
                        "0",
                        "0",
                        "-1200",
                        "0",
                        "0"});
            table639.AddRow(new string[] {
                        "Payment due from Employer",
                        "0",
                        "60",
                        "60",
                        "0",
                        "0",
                        "0"});
            table639.AddRow(new string[] {
                        "Refund due to employer",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
            table639.AddRow(new string[] {
                        "Levy account debited",
                        "0",
                        "600",
                        "600",
                        "0",
                        "0",
                        "0"});
            table639.AddRow(new string[] {
                        "Levy account credited",
                        "0",
                        "0",
                        "0",
                        "1200",
                        "0",
                        "0"});
            table639.AddRow(new string[] {
                        "SFA Levy employer budget",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
            table639.AddRow(new string[] {
                        "SFA Levy co-funding budget",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
            table639.AddRow(new string[] {
                        "SFA Levy additional payments budget",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
            table639.AddRow(new string[] {
                        "SFA non-Levy co-funding budget",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
            table639.AddRow(new string[] {
                        "SFA non-Levy additional payments budget",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
#line 109
        testRunner.Then("the provider earnings and payments break down as follows:", ((string)(null)), table639, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
