// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.1.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SFA.DAS.Payments.AcceptanceTests.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Provider earnings and payments where learner is made redundant during learning")]
    [NUnit.Framework.CategoryAttribute("Redundancy")]
    public partial class ProviderEarningsAndPaymentsWhereLearnerIsMadeRedundantDuringLearningFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "redundancy_payments.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-GB"), "Provider earnings and payments where learner is made redundant during learning", null, ProgrammingLanguage.CSharp, new string[] {
                        "Redundancy"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("806_AC1- DAS learner, is made redundant within the last 6 months of planned learn" +
            "ing - receives full government funding for the rest of the programme")]
        public virtual void _806_AC1_DASLearnerIsMadeRedundantWithinTheLast6MonthsOfPlannedLearning_ReceivesFullGovernmentFundingForTheRestOfTheProgramme()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("806_AC1- DAS learner, is made redundant within the last 6 months of planned learn" +
                    "ing - receives full government funding for the rest of the programme", ((string[])(null)));
#line 5
this.ScenarioSetup(scenarioInfo);
#line 7
        testRunner.Given("The learner is programme only DAS", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 8
        testRunner.And("the apprenticeship funding band maximum is 15000", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 9
        testRunner.And("levy balance > agreed price for all months", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table575 = new TechTalk.SpecFlow.Table(new string[] {
                        "commitment Id",
                        "version Id",
                        "Employer",
                        "Provider",
                        "ULN",
                        "start date",
                        "end date",
                        "agreed price",
                        "status",
                        "effective from",
                        "effective to"});
            table575.AddRow(new string[] {
                        "1",
                        "1",
                        "employer 1",
                        "provider a",
                        "learner a",
                        "01/08/2017",
                        "01/08/2018",
                        "15000",
                        "Active",
                        "01/08/2017",
                        ""});
#line 12
        testRunner.And("the following commitments exist:", ((string)(null)), table575, "And ");
#line hidden
            TechTalk.SpecFlow.Table table576 = new TechTalk.SpecFlow.Table(new string[] {
                        "ULN",
                        "learner type",
                        "start date",
                        "planned end date",
                        "actual end date",
                        "completion status",
                        "Total training price",
                        "Total training price effective date",
                        "Total assessment price",
                        "Total assessment price effective date"});
            table576.AddRow(new string[] {
                        "learner a",
                        "programme only DAS",
                        "03/08/2017",
                        "20/08/2018",
                        "",
                        "continuing",
                        "12000",
                        "03/08/2017",
                        "3000",
                        "03/08/2017"});
#line 16
        testRunner.When("an ILR file is submitted with the following data:", ((string)(null)), table576, "When ");
#line hidden
            TechTalk.SpecFlow.Table table577 = new TechTalk.SpecFlow.Table(new string[] {
                        "contract type",
                        "date from",
                        "date to"});
            table577.AddRow(new string[] {
                        "DAS",
                        "03/08/2017",
                        "20/02/2018"});
            table577.AddRow(new string[] {
                        "Non-DAS",
                        "21/02/2018",
                        ""});
#line 20
        testRunner.And("the Contract type in the ILR is:", ((string)(null)), table577, "And ");
#line hidden
            TechTalk.SpecFlow.Table table578 = new TechTalk.SpecFlow.Table(new string[] {
                        "Employer",
                        "Employment Status",
                        "Employment Status Applies"});
            table578.AddRow(new string[] {
                        "employer 1",
                        "in paid employment",
                        "02/08/2017"});
            table578.AddRow(new string[] {
                        "",
                        "not in paid employment",
                        "21/02/2018"});
#line 26
        testRunner.And("the employment status in the ILR is:", ((string)(null)), table578, "And ");
#line hidden
            TechTalk.SpecFlow.Table table579 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "08/17",
                        "09/17",
                        "10/17",
                        "...",
                        "01/18",
                        "02/18",
                        "03/18",
                        "04/18",
                        "05/18"});
            table579.AddRow(new string[] {
                        "Provider Earned Total",
                        "1000",
                        "1000",
                        "1000",
                        "...",
                        "1000",
                        "1000",
                        "1000",
                        "1000",
                        "1000"});
            table579.AddRow(new string[] {
                        "Provider Earned from SFA",
                        "1000",
                        "1000",
                        "1000",
                        "...",
                        "1000",
                        "1000",
                        "1000",
                        "1000",
                        "1000"});
            table579.AddRow(new string[] {
                        "Provider Earned from Employer",
                        "0",
                        "0",
                        "0",
                        "...",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
            table579.AddRow(new string[] {
                        "Provider Paid by SFA",
                        "0",
                        "1000",
                        "1000",
                        "...",
                        "1000",
                        "1000",
                        "1000",
                        "1000",
                        "1000"});
            table579.AddRow(new string[] {
                        "Refund taken by SFA",
                        "0",
                        "0",
                        "0",
                        "...",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
            table579.AddRow(new string[] {
                        "Payment due from Employer",
                        "0",
                        "0",
                        "0",
                        "...",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
            table579.AddRow(new string[] {
                        "Refund due to employer",
                        "0",
                        "0",
                        "0",
                        "...",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
            table579.AddRow(new string[] {
                        "Levy account debited",
                        "0",
                        "1000",
                        "1000",
                        "...",
                        "1000",
                        "1000",
                        "0",
                        "0",
                        "0"});
            table579.AddRow(new string[] {
                        "Levy account credited",
                        "0",
                        "0",
                        "0",
                        "...",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
            table579.AddRow(new string[] {
                        "SFA Levy employer budget",
                        "1000",
                        "1000",
                        "1000",
                        "...",
                        "1000",
                        "0",
                        "0",
                        "0",
                        "0"});
            table579.AddRow(new string[] {
                        "SFA Levy co-funding budget",
                        "0",
                        "0",
                        "0",
                        "...",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
            table579.AddRow(new string[] {
                        "SFA non-Levy co-funding budget",
                        "0",
                        "0",
                        "0",
                        "...",
                        "0",
                        "1000",
                        "1000",
                        "1000",
                        "1000"});
#line 31
        testRunner.Then("the provider earnings and payments break down as follows:", ((string)(null)), table579, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("806_AC2- DAS learner, is made redundant outside of the last 6 months of planned l" +
            "earning - receives full government funding for the next 12 weeks only")]
        [NUnit.Framework.CategoryAttribute("Redundancy")]
        public virtual void _806_AC2_DASLearnerIsMadeRedundantOutsideOfTheLast6MonthsOfPlannedLearning_ReceivesFullGovernmentFundingForTheNext12WeeksOnly()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("806_AC2- DAS learner, is made redundant outside of the last 6 months of planned l" +
                    "earning - receives full government funding for the next 12 weeks only", new string[] {
                        "Redundancy"});
#line 47
this.ScenarioSetup(scenarioInfo);
#line 49
        testRunner.Given("The learner is programme only DAS", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 50
        testRunner.And("the apprenticeship funding band maximum is 15000", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 51
        testRunner.And("levy balance > agreed price for all months", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table580 = new TechTalk.SpecFlow.Table(new string[] {
                        "commitment Id",
                        "version Id",
                        "Employer",
                        "Provider",
                        "ULN",
                        "start date",
                        "end date",
                        "agreed price",
                        "status",
                        "effective from",
                        "effective to"});
            table580.AddRow(new string[] {
                        "1",
                        "1",
                        "employer 1",
                        "provider a",
                        "learner a",
                        "01/08/2017",
                        "01/08/2018",
                        "15000",
                        "Active",
                        "01/08/2017",
                        ""});
#line 54
        testRunner.And("the following commitments exist:", ((string)(null)), table580, "And ");
#line hidden
            TechTalk.SpecFlow.Table table581 = new TechTalk.SpecFlow.Table(new string[] {
                        "ULN",
                        "learner type",
                        "start date",
                        "planned end date",
                        "actual end date",
                        "completion status",
                        "Total training price",
                        "Total training price effective date",
                        "Total assessment price",
                        "Total assessment price effective date"});
            table581.AddRow(new string[] {
                        "learner a",
                        "programme only DAS",
                        "03/08/2017",
                        "20/08/2018",
                        "",
                        "continuing",
                        "12000",
                        "03/08/2017",
                        "3000",
                        "03/08/2017"});
#line 58
        testRunner.When("an ILR file is submitted with the following data:", ((string)(null)), table581, "When ");
#line hidden
            TechTalk.SpecFlow.Table table582 = new TechTalk.SpecFlow.Table(new string[] {
                        "contract type",
                        "date from",
                        "date to"});
            table582.AddRow(new string[] {
                        "DAS",
                        "03/08/2017",
                        "19/02/2018"});
            table582.AddRow(new string[] {
                        "Non-DAS",
                        "20/02/2018",
                        ""});
#line 62
        testRunner.And("the Contract type in the ILR is:", ((string)(null)), table582, "And ");
#line hidden
            TechTalk.SpecFlow.Table table583 = new TechTalk.SpecFlow.Table(new string[] {
                        "Employer",
                        "Employment Status",
                        "Employment Status Applies"});
            table583.AddRow(new string[] {
                        "employer 1",
                        "in paid employment",
                        "02/08/2017"});
            table583.AddRow(new string[] {
                        "",
                        "not in paid employment",
                        "20/02/2018"});
#line 67
        testRunner.And("the employment status in the ILR is:", ((string)(null)), table583, "And ");
#line hidden
            TechTalk.SpecFlow.Table table584 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "08/17",
                        "09/17",
                        "10/17",
                        "...",
                        "01/18",
                        "02/18",
                        "03/18",
                        "04/18",
                        "05/18"});
            table584.AddRow(new string[] {
                        "Provider Earned Total",
                        "1000",
                        "1000",
                        "1000",
                        "...",
                        "1000",
                        "1000",
                        "1000",
                        "1000",
                        "0"});
            table584.AddRow(new string[] {
                        "Provider Earned from SFA",
                        "1000",
                        "1000",
                        "1000",
                        "...",
                        "1000",
                        "1000",
                        "1000",
                        "1000",
                        "0"});
            table584.AddRow(new string[] {
                        "Provider Earned from Employer",
                        "0",
                        "0",
                        "0",
                        "...",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
            table584.AddRow(new string[] {
                        "Provider Paid by SFA",
                        "0",
                        "1000",
                        "1000",
                        "...",
                        "1000",
                        "1000",
                        "1000",
                        "1000",
                        "1000"});
            table584.AddRow(new string[] {
                        "Refund taken by SFA",
                        "0",
                        "0",
                        "0",
                        "...",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
            table584.AddRow(new string[] {
                        "Payment due from Employer",
                        "0",
                        "0",
                        "0",
                        "...",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
            table584.AddRow(new string[] {
                        "Refund due to employer",
                        "0",
                        "0",
                        "0",
                        "...",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
            table584.AddRow(new string[] {
                        "Levy account debited",
                        "0",
                        "1000",
                        "1000",
                        "...",
                        "1000",
                        "1000",
                        "0",
                        "0",
                        "0"});
            table584.AddRow(new string[] {
                        "Levy account credited",
                        "0",
                        "0",
                        "0",
                        "...",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
            table584.AddRow(new string[] {
                        "SFA Levy employer budget",
                        "1000",
                        "1000",
                        "1000",
                        "...",
                        "1000",
                        "0",
                        "0",
                        "0",
                        "0"});
            table584.AddRow(new string[] {
                        "SFA Levy co-funding budget",
                        "0",
                        "0",
                        "0",
                        "...",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
            table584.AddRow(new string[] {
                        "SFA non-Levy co-funding budget",
                        "0",
                        "0",
                        "0",
                        "...",
                        "0",
                        "1000",
                        "1000",
                        "1000",
                        "0"});
#line 72
        testRunner.Then("the provider earnings and payments break down as follows:", ((string)(null)), table584, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("807_AC1- Non-DAS learner, is made redundant within the last 6 months of planned l" +
            "earning - receives full government funding for the rest of the programme")]
        [NUnit.Framework.CategoryAttribute("Redundancy")]
        public virtual void _807_AC1_Non_DASLearnerIsMadeRedundantWithinTheLast6MonthsOfPlannedLearning_ReceivesFullGovernmentFundingForTheRestOfTheProgramme()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("807_AC1- Non-DAS learner, is made redundant within the last 6 months of planned l" +
                    "earning - receives full government funding for the rest of the programme", new string[] {
                        "Redundancy"});
#line 88
this.ScenarioSetup(scenarioInfo);
#line 90
        testRunner.Given("the apprenticeship funding band maximum is 15000", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table585 = new TechTalk.SpecFlow.Table(new string[] {
                        "ULN",
                        "learner type",
                        "start date",
                        "planned end date",
                        "actual end date",
                        "completion status",
                        "Total training price",
                        "Total training price effective date",
                        "Total assessment price",
                        "Total assessment price effective date"});
            table585.AddRow(new string[] {
                        "learner a",
                        "programme only non-DAS",
                        "03/08/2017",
                        "20/08/2018",
                        "",
                        "continuing",
                        "12000",
                        "03/08/2017",
                        "3000",
                        "03/08/2017"});
#line 95
        testRunner.When("an ILR file is submitted with the following data:", ((string)(null)), table585, "When ");
#line hidden
            TechTalk.SpecFlow.Table table586 = new TechTalk.SpecFlow.Table(new string[] {
                        "Employer",
                        "Employment Status",
                        "Employment Status Applies"});
            table586.AddRow(new string[] {
                        "employer 1",
                        "in paid employment",
                        "02/08/2017"});
            table586.AddRow(new string[] {
                        "",
                        "not in paid employment",
                        "21/02/2018"});
#line 99
        testRunner.And("the employment status in the ILR is:", ((string)(null)), table586, "And ");
#line hidden
            TechTalk.SpecFlow.Table table587 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "08/17",
                        "09/17",
                        "10/17",
                        "...",
                        "01/18",
                        "02/18",
                        "03/18",
                        "04/18",
                        "05/18"});
            table587.AddRow(new string[] {
                        "Provider Earned Total",
                        "1000",
                        "1000",
                        "1000",
                        "...",
                        "1000",
                        "1000",
                        "1000",
                        "1000",
                        "1000"});
            table587.AddRow(new string[] {
                        "Provider Earned from SFA",
                        "900",
                        "900",
                        "900",
                        "...",
                        "900",
                        "1000",
                        "1000",
                        "1000",
                        "1000"});
            table587.AddRow(new string[] {
                        "Provider Earned from Employer",
                        "100",
                        "100",
                        "100",
                        "...",
                        "100",
                        "0",
                        "0",
                        "0",
                        "0"});
            table587.AddRow(new string[] {
                        "Provider Paid by SFA",
                        "0",
                        "900",
                        "900",
                        "...",
                        "900",
                        "900",
                        "1000",
                        "1000",
                        "1000"});
            table587.AddRow(new string[] {
                        "Refund taken by SFA",
                        "0",
                        "0",
                        "0",
                        "...",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
            table587.AddRow(new string[] {
                        "Payment due from Employer",
                        "0",
                        "100",
                        "100",
                        "...",
                        "100",
                        "100",
                        "0",
                        "0",
                        "0"});
            table587.AddRow(new string[] {
                        "Refund due to employer",
                        "0",
                        "0",
                        "0",
                        "...",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
            table587.AddRow(new string[] {
                        "Levy account debited",
                        "0",
                        "0",
                        "0",
                        "...",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
            table587.AddRow(new string[] {
                        "Levy account credited",
                        "0",
                        "0",
                        "0",
                        "...",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
            table587.AddRow(new string[] {
                        "SFA Levy employer budget",
                        "0",
                        "0",
                        "0",
                        "...",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
            table587.AddRow(new string[] {
                        "SFA Levy co-funding budget",
                        "0",
                        "0",
                        "0",
                        "...",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
            table587.AddRow(new string[] {
                        "SFA non-Levy co-funding budget",
                        "900",
                        "900",
                        "900",
                        "...",
                        "900",
                        "1000",
                        "1000",
                        "1000",
                        "1000"});
#line 104
        testRunner.Then("the provider earnings and payments break down as follows:", ((string)(null)), table587, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("807_AC2- Non-DAS learner, is made redundant outside of the last 6 months of plann" +
            "ed learning - receives full government funding for the next 12 weeks only")]
        public virtual void _807_AC2_Non_DASLearnerIsMadeRedundantOutsideOfTheLast6MonthsOfPlannedLearning_ReceivesFullGovernmentFundingForTheNext12WeeksOnly()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("807_AC2- Non-DAS learner, is made redundant outside of the last 6 months of plann" +
                    "ed learning - receives full government funding for the next 12 weeks only", ((string[])(null)));
#line 121
this.ScenarioSetup(scenarioInfo);
#line 123
        testRunner.Given("the apprenticeship funding band maximum is 15000", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table588 = new TechTalk.SpecFlow.Table(new string[] {
                        "ULN",
                        "learner type",
                        "start date",
                        "planned end date",
                        "actual end date",
                        "completion status",
                        "Total training price",
                        "Total training price effective date",
                        "Total assessment price",
                        "Total assessment price effective date"});
            table588.AddRow(new string[] {
                        "learner a",
                        "programme only non-DAS",
                        "03/08/2017",
                        "20/08/2018",
                        "",
                        "continuing",
                        "12000",
                        "03/08/2017",
                        "3000",
                        "03/08/2017"});
#line 126
        testRunner.When("an ILR file is submitted with the following data:", ((string)(null)), table588, "When ");
#line hidden
            TechTalk.SpecFlow.Table table589 = new TechTalk.SpecFlow.Table(new string[] {
                        "Employer",
                        "Employment Status",
                        "Employment Status Applies"});
            table589.AddRow(new string[] {
                        "employer 1",
                        "in paid employment",
                        "02/08/2017"});
            table589.AddRow(new string[] {
                        "",
                        "not in paid employment",
                        "19/02/2018"});
#line 130
        testRunner.And("the employment status in the ILR is:", ((string)(null)), table589, "And ");
#line hidden
            TechTalk.SpecFlow.Table table590 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "08/17",
                        "09/17",
                        "10/17",
                        "...",
                        "01/18",
                        "02/18",
                        "03/18",
                        "04/18",
                        "05/18"});
            table590.AddRow(new string[] {
                        "Provider Earned Total",
                        "1000",
                        "1000",
                        "1000",
                        "...",
                        "1000",
                        "1000",
                        "1000",
                        "1000",
                        "0"});
            table590.AddRow(new string[] {
                        "Provider Earned from SFA",
                        "900",
                        "900",
                        "900",
                        "...",
                        "900",
                        "1000",
                        "1000",
                        "1000",
                        "0"});
            table590.AddRow(new string[] {
                        "Provider Earned from Employer",
                        "100",
                        "100",
                        "100",
                        "...",
                        "100",
                        "0",
                        "0",
                        "0",
                        "0"});
            table590.AddRow(new string[] {
                        "Provider Paid by SFA",
                        "0",
                        "900",
                        "900",
                        "...",
                        "900",
                        "900",
                        "1000",
                        "1000",
                        "1000"});
            table590.AddRow(new string[] {
                        "Refund taken by SFA",
                        "0",
                        "0",
                        "0",
                        "...",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
            table590.AddRow(new string[] {
                        "Payment due from Employer",
                        "0",
                        "100",
                        "100",
                        "...",
                        "100",
                        "100",
                        "0",
                        "0",
                        "0"});
            table590.AddRow(new string[] {
                        "Refund due to employer",
                        "0",
                        "0",
                        "0",
                        "...",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
            table590.AddRow(new string[] {
                        "Levy account debited",
                        "0",
                        "0",
                        "0",
                        "...",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
            table590.AddRow(new string[] {
                        "Levy account credited",
                        "0",
                        "0",
                        "0",
                        "...",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
            table590.AddRow(new string[] {
                        "SFA Levy employer budget",
                        "0",
                        "0",
                        "0",
                        "...",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
            table590.AddRow(new string[] {
                        "SFA Levy co-funding budget",
                        "0",
                        "0",
                        "0",
                        "...",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
            table590.AddRow(new string[] {
                        "SFA non-Levy co-funding budget",
                        "900",
                        "900",
                        "900",
                        "...",
                        "900",
                        "1000",
                        "1000",
                        "1000",
                        "0"});
#line 135
        testRunner.Then("the provider earnings and payments break down as follows:", ((string)(null)), table590, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
