// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.1.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SFA.DAS.Payments.AcceptanceTests.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("chanegs in aim sequence or ULN")]
    [NUnit.Framework.CategoryAttribute("ChangeInCircumstances")]
    public partial class ChanegsInAimSequenceOrULNFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "change_in_ilr.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-GB"), "chanegs in aim sequence or ULN", null, ProgrammingLanguage.CSharp, new string[] {
                        "ChangeInCircumstances"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("822-AC01- Levy apprentice, provider changes aim sequence numbers in ILR after pay" +
            "ments have already occurred")]
        [NUnit.Framework.CategoryAttribute("AimSequenceOrUlnChange")]
        public virtual void _822_AC01_LevyApprenticeProviderChangesAimSequenceNumbersInILRAfterPaymentsHaveAlreadyOccurred()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("822-AC01- Levy apprentice, provider changes aim sequence numbers in ILR after pay" +
                    "ments have already occurred", new string[] {
                        "AimSequenceOrUlnChange"});
#line 5
this.ScenarioSetup(scenarioInfo);
#line 7
        testRunner.Given("The learner is programme only DAS", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 8
        testRunner.And("levy balance > agreed price for all months", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 9
        testRunner.And("the apprenticeship funding band maximum is 9000", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table258 = new TechTalk.SpecFlow.Table(new string[] {
                        "commitment Id",
                        "version Id",
                        "ULN",
                        "start date",
                        "end date",
                        "framework code",
                        "programme type",
                        "pathway code",
                        "agreed price",
                        "status",
                        "effective from",
                        "effective to"});
            table258.AddRow(new string[] {
                        "1",
                        "1",
                        "learner a",
                        "01/05/2017",
                        "01/05/2018",
                        "403",
                        "2",
                        "1",
                        "9000",
                        "Active",
                        "01/05/2017",
                        ""});
#line 11
        testRunner.And("the following commitments exist:", ((string)(null)), table258, "And ");
#line hidden
            TechTalk.SpecFlow.Table table259 = new TechTalk.SpecFlow.Table(new string[] {
                        "ULN",
                        "start date",
                        "aim sequence number",
                        "framework code",
                        "programme type",
                        "pathway code",
                        "completion status"});
            table259.AddRow(new string[] {
                        "learner a",
                        "06/05/2017",
                        "1",
                        "403",
                        "2",
                        "1",
                        "continuing"});
#line 15
  testRunner.And("following learning has been recorded for previous payments:", ((string)(null)), table259, "And ");
#line hidden
            TechTalk.SpecFlow.Table table260 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "05/17",
                        "06/17",
                        "07/17",
                        "08/17"});
            table260.AddRow(new string[] {
                        "Provider Earned Total",
                        "600",
                        "600",
                        "0",
                        "0"});
            table260.AddRow(new string[] {
                        "Provider Earned from SFA",
                        "600",
                        "600",
                        "0",
                        "0"});
            table260.AddRow(new string[] {
                        "Provider Earned from Employer",
                        "0",
                        "0",
                        "0",
                        "0"});
            table260.AddRow(new string[] {
                        "Provider Paid by SFA",
                        "0",
                        "600",
                        "600",
                        "0"});
            table260.AddRow(new string[] {
                        "Payment due from Employer",
                        "0",
                        "0",
                        "0",
                        "0"});
            table260.AddRow(new string[] {
                        "Levy account debited",
                        "0",
                        "600",
                        "600",
                        "0"});
            table260.AddRow(new string[] {
                        "SFA Levy employer budget",
                        "600",
                        "600",
                        "0",
                        "0"});
            table260.AddRow(new string[] {
                        "SFA Levy co-funding budget",
                        "0",
                        "0",
                        "0",
                        "0"});
            table260.AddRow(new string[] {
                        "SFA Levy additional payments budget",
                        "0",
                        "0",
                        "0",
                        "0"});
            table260.AddRow(new string[] {
                        "SFA non-Levy co-funding budget",
                        "0",
                        "0",
                        "0",
                        "0"});
#line 19
  testRunner.And("the following earnings and payments have been made to the provider A for learner " +
                    "a:", ((string)(null)), table260, "And ");
#line hidden
            TechTalk.SpecFlow.Table table261 = new TechTalk.SpecFlow.Table(new string[] {
                        "ULN",
                        "learner type",
                        "agreed price",
                        "start date",
                        "planned end date",
                        "actual end date",
                        "completion status",
                        "aim type",
                        "aim sequence number",
                        "aim rate",
                        "framework code",
                        "programme type",
                        "pathway code"});
            table261.AddRow(new string[] {
                        "learner a",
                        "programme only DAS",
                        "9000",
                        "06/05/2017",
                        "20/05/2018",
                        "",
                        "continuing",
                        "programme",
                        "2",
                        "",
                        "403",
                        "2",
                        "1"});
            table261.AddRow(new string[] {
                        "learner a",
                        "programme only DAS",
                        "",
                        "06/05/2017",
                        "20/05/2018",
                        "",
                        "continuing",
                        "maths or english",
                        "1",
                        "471",
                        "403",
                        "2",
                        "1"});
#line 32
        testRunner.When("an ILR file is submitted for the first time on 31/07/17 with the following data:", ((string)(null)), table261, "When ");
#line hidden
            TechTalk.SpecFlow.Table table262 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "05/17",
                        "06/17",
                        "07/17",
                        "08/17"});
            table262.AddRow(new string[] {
                        "Provider Earned Total",
                        "639.25",
                        "639.25",
                        "639.25",
                        "639.25"});
            table262.AddRow(new string[] {
                        "Provider Earned from SFA",
                        "639.25",
                        "639.25",
                        "639.25",
                        "0"});
            table262.AddRow(new string[] {
                        "Provider Earned from Employer",
                        "0",
                        "0",
                        "0",
                        "0"});
            table262.AddRow(new string[] {
                        "Provider Paid by SFA",
                        "0",
                        "600",
                        "600",
                        "717.75"});
            table262.AddRow(new string[] {
                        "Refund taken by SFA",
                        "0",
                        "0",
                        "0",
                        "0"});
            table262.AddRow(new string[] {
                        "Payment due from Employer",
                        "0",
                        "0",
                        "0",
                        "0"});
            table262.AddRow(new string[] {
                        "Refund due to employer",
                        "0",
                        "0",
                        "0",
                        "0"});
            table262.AddRow(new string[] {
                        "Levy account debited",
                        "0",
                        "600",
                        "600",
                        "600"});
            table262.AddRow(new string[] {
                        "Levy account credited",
                        "0",
                        "0",
                        "0",
                        "0"});
            table262.AddRow(new string[] {
                        "SFA Levy employer budget",
                        "600",
                        "600",
                        "600",
                        "600"});
            table262.AddRow(new string[] {
                        "SFA Levy co-funding budget",
                        "0",
                        "0",
                        "0",
                        "0"});
            table262.AddRow(new string[] {
                        "SFA Levy additional payments budget",
                        "39.25",
                        "39.25",
                        "39.25",
                        "39.25"});
            table262.AddRow(new string[] {
                        "SFA non-Levy co-funding budget",
                        "0",
                        "0",
                        "0",
                        "0"});
            table262.AddRow(new string[] {
                        "SFA non-Levy additional payments budget",
                        "0",
                        "0",
                        "0",
                        "0"});
#line 37
        testRunner.Then("the provider earnings and payments break down as follows:", ((string)(null)), table262, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("822-AC02 Non-Levy apprentice, provider changes aim sequence numbers in ILR after " +
            "payments have already occurred")]
        [NUnit.Framework.CategoryAttribute("AimSequenceOrUlnChange")]
        public virtual void _822_AC02Non_LevyApprenticeProviderChangesAimSequenceNumbersInILRAfterPaymentsHaveAlreadyOccurred()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("822-AC02 Non-Levy apprentice, provider changes aim sequence numbers in ILR after " +
                    "payments have already occurred", new string[] {
                        "AimSequenceOrUlnChange"});
#line 56
 this.ScenarioSetup(scenarioInfo);
#line 58
        testRunner.Given("the apprenticeship funding band maximum is 9000", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table263 = new TechTalk.SpecFlow.Table(new string[] {
                        "ULN",
                        "start date",
                        "aim sequence number",
                        "framework code",
                        "programme type",
                        "pathway code",
                        "completion status"});
            table263.AddRow(new string[] {
                        "learner a",
                        "06/05/2017",
                        "1",
                        "403",
                        "2",
                        "1",
                        "continuing"});
#line 59
   testRunner.And("following learning has been recorded for previous payments:", ((string)(null)), table263, "And ");
#line hidden
            TechTalk.SpecFlow.Table table264 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "05/17",
                        "06/17",
                        "07/17",
                        "08/17"});
            table264.AddRow(new string[] {
                        "Provider Earned Total",
                        "600",
                        "600",
                        "0",
                        "0"});
            table264.AddRow(new string[] {
                        "Provider Earned from SFA",
                        "540",
                        "540",
                        "0",
                        "0"});
            table264.AddRow(new string[] {
                        "Provider Earned from Employer",
                        "60",
                        "60",
                        "0",
                        "0"});
            table264.AddRow(new string[] {
                        "Provider Paid by SFA",
                        "0",
                        "540",
                        "540",
                        "0"});
            table264.AddRow(new string[] {
                        "Payment due from Employer",
                        "0",
                        "60",
                        "60",
                        "0"});
            table264.AddRow(new string[] {
                        "Levy account debited",
                        "0",
                        "0",
                        "0",
                        "0"});
            table264.AddRow(new string[] {
                        "SFA Levy employer budget",
                        "0",
                        "0",
                        "0",
                        "0"});
            table264.AddRow(new string[] {
                        "SFA Levy co-funding budget",
                        "0",
                        "0",
                        "0",
                        "0"});
            table264.AddRow(new string[] {
                        "SFA Levy additional payments budget",
                        "0",
                        "0",
                        "0",
                        "0"});
            table264.AddRow(new string[] {
                        "SFA non-Levy co-funding budget",
                        "540",
                        "540",
                        "0",
                        "0"});
            table264.AddRow(new string[] {
                        "SFA non-Levy additional payments budget",
                        "0",
                        "0",
                        "0",
                        "0"});
#line 63
  testRunner.And("the following earnings and payments have been made to the provider A for learner " +
                    "a:", ((string)(null)), table264, "And ");
#line hidden
            TechTalk.SpecFlow.Table table265 = new TechTalk.SpecFlow.Table(new string[] {
                        "ULN",
                        "learner type",
                        "agreed price",
                        "start date",
                        "planned end date",
                        "actual end date",
                        "completion status",
                        "aim type",
                        "aim sequence number",
                        "aim rate",
                        "framework code",
                        "programme type",
                        "pathway code"});
            table265.AddRow(new string[] {
                        "learner a",
                        "programme only non-DAS",
                        "9000",
                        "06/05/2017",
                        "20/05/2018",
                        "",
                        "continuing",
                        "programme",
                        "2",
                        "",
                        "403",
                        "2",
                        "1"});
            table265.AddRow(new string[] {
                        "learner a",
                        "programme only non-DAS",
                        "",
                        "06/05/2017",
                        "20/05/2018",
                        "",
                        "continuing",
                        "maths or english",
                        "1",
                        "471",
                        "403",
                        "2",
                        "1"});
#line 77
        testRunner.When("an ILR file is submitted for the first time on 31/07/17 with the following data:", ((string)(null)), table265, "When ");
#line hidden
            TechTalk.SpecFlow.Table table266 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "05/17",
                        "06/17",
                        "07/17",
                        "08/17"});
            table266.AddRow(new string[] {
                        "Provider Earned Total",
                        "639.25",
                        "639.25",
                        "639.25",
                        "639.25"});
            table266.AddRow(new string[] {
                        "Provider Earned from SFA",
                        "579.25",
                        "579.25",
                        "579.25",
                        "0"});
            table266.AddRow(new string[] {
                        "Provider Earned from Employer",
                        "60",
                        "60",
                        "60",
                        "0"});
            table266.AddRow(new string[] {
                        "Provider Paid by SFA",
                        "0",
                        "540",
                        "540",
                        "657.75"});
            table266.AddRow(new string[] {
                        "Refund taken by SFA",
                        "0",
                        "0",
                        "0",
                        "0"});
            table266.AddRow(new string[] {
                        "Payment due from Employer",
                        "0",
                        "60",
                        "60",
                        "60"});
            table266.AddRow(new string[] {
                        "Refund due to employer",
                        "0",
                        "0",
                        "0",
                        "0"});
            table266.AddRow(new string[] {
                        "Levy account debited",
                        "0",
                        "0",
                        "0",
                        "0"});
            table266.AddRow(new string[] {
                        "Levy account credited",
                        "0",
                        "0",
                        "0",
                        "0"});
            table266.AddRow(new string[] {
                        "SFA Levy employer budget",
                        "0",
                        "0",
                        "0",
                        "0"});
            table266.AddRow(new string[] {
                        "SFA Levy co-funding budget",
                        "0",
                        "0",
                        "0",
                        "0"});
            table266.AddRow(new string[] {
                        "SFA Levy additional payments budget",
                        "0",
                        "0",
                        "0",
                        "0"});
            table266.AddRow(new string[] {
                        "SFA non-Levy co-funding budget",
                        "540",
                        "540",
                        "540",
                        "540"});
            table266.AddRow(new string[] {
                        "SFA non-Levy additional payments budget",
                        "39.25",
                        "39.25",
                        "39.25",
                        "39.25"});
#line 82
        testRunner.Then("the provider earnings and payments break down as follows:", ((string)(null)), table266, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
