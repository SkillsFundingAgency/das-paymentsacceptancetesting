// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.1.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SFA.DAS.Payments.AcceptanceTests.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Employer stops payments on a commitment")]
    [NUnit.Framework.CategoryAttribute("EmployerStopsPayments")]
    public partial class EmployerStopsPaymentsOnACommitmentFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "employer_stops_payments.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-GB"), "Employer stops payments on a commitment", null, ProgrammingLanguage.CSharp, new string[] {
                        "EmployerStopsPayments"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Commitment payments are stopped midway through the learning episode")]
        public virtual void CommitmentPaymentsAreStoppedMidwayThroughTheLearningEpisode()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Commitment payments are stopped midway through the learning episode", ((string[])(null)));
#line 4
    this.ScenarioSetup(scenarioInfo);
#line 5
        testRunner.Given("levy balance > agreed price for all months", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table399 = new TechTalk.SpecFlow.Table(new string[] {
                        "commitment Id",
                        "version Id",
                        "ULN",
                        "start date",
                        "end date",
                        "status",
                        "agreed price",
                        "effective from",
                        "effective to"});
            table399.AddRow(new string[] {
                        "1",
                        "1",
                        "learner a",
                        "01/09/2017",
                        "08/09/2018",
                        "active",
                        "15000",
                        "01/09/2017",
                        "31/10/2017"});
            table399.AddRow(new string[] {
                        "1",
                        "2",
                        "learner a",
                        "01/09/2017",
                        "08/09/2018",
                        "paused",
                        "15000",
                        "01/11/2017",
                        ""});
#line 6
        testRunner.And("the following commitments exist:", ((string)(null)), table399, "And ");
#line hidden
            TechTalk.SpecFlow.Table table400 = new TechTalk.SpecFlow.Table(new string[] {
                        "ULN",
                        "agreed price",
                        "learner type",
                        "start date",
                        "planned end date",
                        "completion status"});
            table400.AddRow(new string[] {
                        "learner a",
                        "15000",
                        "programme only DAS",
                        "01/09/2017",
                        "08/09/2018",
                        "continuing"});
#line 10
        testRunner.When("an ILR file is submitted every month with the following data:", ((string)(null)), table400, "When ");
#line hidden
            TechTalk.SpecFlow.Table table401 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "09/17",
                        "10/17",
                        "11/17",
                        "12/17",
                        "...",
                        "03/18"});
            table401.AddRow(new string[] {
                        "Provider Earned Total",
                        "1000",
                        "1000",
                        "1000",
                        "1000",
                        "...",
                        "1000"});
            table401.AddRow(new string[] {
                        "Provider Earned from SFA",
                        "1000",
                        "1000",
                        "0",
                        "0",
                        "...",
                        "0"});
            table401.AddRow(new string[] {
                        "Provider Earned from Employer",
                        "0",
                        "0",
                        "0",
                        "0",
                        "...",
                        "0"});
            table401.AddRow(new string[] {
                        "Provider Paid by SFA",
                        "0",
                        "1000",
                        "1000",
                        "0",
                        "...",
                        "0"});
            table401.AddRow(new string[] {
                        "Payment due from Employer",
                        "0",
                        "0",
                        "0",
                        "0",
                        "...",
                        "0"});
            table401.AddRow(new string[] {
                        "Levy account debited",
                        "0",
                        "1000",
                        "1000",
                        "0",
                        "...",
                        "0"});
            table401.AddRow(new string[] {
                        "SFA Levy employer budget",
                        "1000",
                        "1000",
                        "0",
                        "0",
                        "...",
                        "0"});
            table401.AddRow(new string[] {
                        "SFA Levy co-funding budget",
                        "0",
                        "0",
                        "0",
                        "0",
                        "...",
                        "0"});
            table401.AddRow(new string[] {
                        "SFA non-Levy co-funding budget",
                        "0",
                        "0",
                        "0",
                        "0",
                        "...",
                        "0"});
#line 13
        testRunner.Then("the provider earnings and payments break down as follows:", ((string)(null)), table401, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("The provider submits the first ILR file after the commitment payments have been s" +
            "topped")]
        public virtual void TheProviderSubmitsTheFirstILRFileAfterTheCommitmentPaymentsHaveBeenStopped()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The provider submits the first ILR file after the commitment payments have been s" +
                    "topped", ((string[])(null)));
#line 26
    this.ScenarioSetup(scenarioInfo);
#line 27
        testRunner.Given("levy balance > agreed price for all months", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table402 = new TechTalk.SpecFlow.Table(new string[] {
                        "commitment Id",
                        "version Id",
                        "ULN",
                        "start date",
                        "end date",
                        "status",
                        "agreed price",
                        "effective from",
                        "effective to"});
            table402.AddRow(new string[] {
                        "1",
                        "1",
                        "learner a",
                        "01/09/2017",
                        "08/09/2018",
                        "active",
                        "15000",
                        "01/09/2017",
                        "31/08/2017"});
            table402.AddRow(new string[] {
                        "1",
                        "2",
                        "learner a",
                        "01/09/2017",
                        "08/09/2018",
                        "paused",
                        "15000",
                        "01/09/2017",
                        ""});
#line 28
        testRunner.And("the following commitments exist:", ((string)(null)), table402, "And ");
#line hidden
            TechTalk.SpecFlow.Table table403 = new TechTalk.SpecFlow.Table(new string[] {
                        "ULN",
                        "agreed price",
                        "learner type",
                        "start date",
                        "planned end date",
                        "completion status"});
            table403.AddRow(new string[] {
                        "learner a",
                        "15000",
                        "programme only DAS",
                        "01/09/2017",
                        "08/09/2018",
                        "continuing"});
#line 32
        testRunner.When("an ILR file is submitted for the first time on 28/12/17 with the following data:", ((string)(null)), table403, "When ");
#line hidden
            TechTalk.SpecFlow.Table table404 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "09/17",
                        "10/17",
                        "11/17",
                        "12/17",
                        "...",
                        "03/18"});
            table404.AddRow(new string[] {
                        "Provider Earned Total",
                        "1000",
                        "1000",
                        "1000",
                        "1000",
                        "...",
                        "1000"});
            table404.AddRow(new string[] {
                        "Provider Earned from SFA",
                        "0",
                        "0",
                        "0",
                        "0",
                        "...",
                        "0"});
            table404.AddRow(new string[] {
                        "Provider Earned from Employer",
                        "0",
                        "0",
                        "0",
                        "0",
                        "...",
                        "0"});
            table404.AddRow(new string[] {
                        "Provider Paid by SFA",
                        "0",
                        "0",
                        "0",
                        "0",
                        "...",
                        "0"});
            table404.AddRow(new string[] {
                        "Payment due from Employer",
                        "0",
                        "0",
                        "0",
                        "0",
                        "...",
                        "0"});
            table404.AddRow(new string[] {
                        "Levy account debited",
                        "0",
                        "0",
                        "0",
                        "0",
                        "...",
                        "0"});
            table404.AddRow(new string[] {
                        "SFA Levy employer budget",
                        "0",
                        "0",
                        "0",
                        "0",
                        "...",
                        "0"});
            table404.AddRow(new string[] {
                        "SFA Levy co-funding budget",
                        "0",
                        "0",
                        "0",
                        "0",
                        "...",
                        "0"});
            table404.AddRow(new string[] {
                        "SFA non-Levy co-funding budget",
                        "0",
                        "0",
                        "0",
                        "0",
                        "...",
                        "0"});
#line 35
        testRunner.Then("the provider earnings and payments break down as follows:", ((string)(null)), table404, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("700_AC01 DAS learner, payments are stopped as the employer has never paid levy")]
        public virtual void _700_AC01DASLearnerPaymentsAreStoppedAsTheEmployerHasNeverPaidLevy()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("700_AC01 DAS learner, payments are stopped as the employer has never paid levy", ((string[])(null)));
#line 48
this.ScenarioSetup(scenarioInfo);
#line 50
        testRunner.Given("the employer is not a levy payer", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table405 = new TechTalk.SpecFlow.Table(new string[] {
                        "commitment Id",
                        "ULN",
                        "priority",
                        "start date",
                        "end date",
                        "agreed price"});
            table405.AddRow(new string[] {
                        "1",
                        "learner a",
                        "1",
                        "01/08/2017",
                        "01/08/2018",
                        "15000"});
#line 51
  testRunner.And("the following commitments exist:", ((string)(null)), table405, "And ");
#line hidden
            TechTalk.SpecFlow.Table table406 = new TechTalk.SpecFlow.Table(new string[] {
                        "learner type",
                        "agreed price",
                        "start date",
                        "planned end date",
                        "actual end date",
                        "completion status"});
            table406.AddRow(new string[] {
                        "programme only DAS",
                        "15000",
                        "05/08/2017",
                        "20/08/2018",
                        "",
                        "continuing"});
#line 54
  testRunner.When("an ILR file is submitted with the following data:", ((string)(null)), table406, "When ");
#line hidden
            TechTalk.SpecFlow.Table table407 = new TechTalk.SpecFlow.Table(new string[] {
                        "Payment type",
                        "08/17",
                        "09/17",
                        "10/17",
                        "11/17",
                        "12/17"});
            table407.AddRow(new string[] {
                        "On-program",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table407.AddRow(new string[] {
                        "Completion",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table407.AddRow(new string[] {
                        "Employer 16-18 incentive",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table407.AddRow(new string[] {
                        "Provider 16-18 incentive",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table407.AddRow(new string[] {
                        "Provider learning support",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table407.AddRow(new string[] {
                        "English and maths on programme",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table407.AddRow(new string[] {
                        "English and maths Balancing",
                        "",
                        "",
                        "",
                        "",
                        ""});
#line 57
  testRunner.Then("the data lock status will be as follows:", ((string)(null)), table407, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table408 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "08/17",
                        "09/17",
                        "10/17"});
            table408.AddRow(new string[] {
                        "Provider Earned Total",
                        "1000",
                        "1000",
                        "1000"});
            table408.AddRow(new string[] {
                        "Provider Earned from SFA",
                        "0",
                        "0",
                        "0"});
            table408.AddRow(new string[] {
                        "Provider Paid by SFA",
                        "0",
                        "0",
                        "0"});
            table408.AddRow(new string[] {
                        "Levy account debited",
                        "0",
                        "0",
                        "0"});
            table408.AddRow(new string[] {
                        "SFA Levy employer budget",
                        "0",
                        "0",
                        "0"});
            table408.AddRow(new string[] {
                        "SFA Levy co-funding budget",
                        "0",
                        "0",
                        "0"});
#line 67
  testRunner.And("the provider earnings and payments break down as follows:", ((string)(null)), table408, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("884_AC01 DAS learner, no incentive payments made when commitment is withdrawan be" +
            "fore threshold date")]
        public virtual void _884_AC01DASLearnerNoIncentivePaymentsMadeWhenCommitmentIsWithdrawanBeforeThresholdDate()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("884_AC01 DAS learner, no incentive payments made when commitment is withdrawan be" +
                    "fore threshold date", ((string[])(null)));
#line 81
this.ScenarioSetup(scenarioInfo);
#line 85
        testRunner.Given("levy balance > agreed price for all months", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table409 = new TechTalk.SpecFlow.Table(new string[] {
                        "commitment Id",
                        "version Id",
                        "ULN",
                        "start date",
                        "end date",
                        "agreed price",
                        "status",
                        "effective from",
                        "effective to"});
            table409.AddRow(new string[] {
                        "1",
                        "1-001",
                        "learner a",
                        "15/08/2017",
                        "01/08/2018",
                        "15000",
                        "active",
                        "15/08/2017",
                        "01/11/2017"});
            table409.AddRow(new string[] {
                        "1",
                        "1-002",
                        "learner a",
                        "01/11/2017",
                        "01/08/2018",
                        "15000",
                        "cancelled",
                        "01/11/2017",
                        "01/08/2018"});
#line 86
  testRunner.And("the following commitments exist:", ((string)(null)), table409, "And ");
#line hidden
            TechTalk.SpecFlow.Table table410 = new TechTalk.SpecFlow.Table(new string[] {
                        "learner type",
                        "agreed price",
                        "start date",
                        "planned end date",
                        "actual end date",
                        "completion status"});
            table410.AddRow(new string[] {
                        "16-18 programme only DAS",
                        "15000",
                        "15/08/2017",
                        "20/08/2018",
                        "",
                        "continuing"});
#line 91
   testRunner.When("an ILR file is submitted with the following data:", ((string)(null)), table410, "When ");
#line hidden
            TechTalk.SpecFlow.Table table411 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "08/17",
                        "09/17",
                        "10/17",
                        "11/17",
                        "12/17"});
            table411.AddRow(new string[] {
                        "Provider Earned Total",
                        "1000",
                        "1000",
                        "1000",
                        "2000",
                        "1000"});
            table411.AddRow(new string[] {
                        "Provider Earned from SFA",
                        "1000",
                        "1000",
                        "1000",
                        "2000",
                        "1000"});
            table411.AddRow(new string[] {
                        "Provider Earned from Employer",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
            table411.AddRow(new string[] {
                        "Provider Paid by SFA",
                        "0",
                        "1000",
                        "1000",
                        "1000",
                        "0"});
            table411.AddRow(new string[] {
                        "Payment due from Employer",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
            table411.AddRow(new string[] {
                        "Levy account debited",
                        "0",
                        "1000",
                        "1000",
                        "1000",
                        "0"});
            table411.AddRow(new string[] {
                        "SFA Levy employer budget",
                        "1000",
                        "1000",
                        "1000",
                        "0",
                        "0"});
            table411.AddRow(new string[] {
                        "SFA Levy co-funding budget",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
#line 95
  testRunner.Then("the provider earnings and payments break down as follows:", ((string)(null)), table411, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table412 = new TechTalk.SpecFlow.Table(new string[] {
                        "Payment type",
                        "09/17",
                        "10/17",
                        "11/17",
                        "12/17"});
            table412.AddRow(new string[] {
                        "On-program",
                        "1000",
                        "1000",
                        "1000",
                        "0"});
            table412.AddRow(new string[] {
                        "Employer 16-18 incentive",
                        "0",
                        "0",
                        "0",
                        "0"});
            table412.AddRow(new string[] {
                        "Provider 16-18 incentive",
                        "0",
                        "0",
                        "0",
                        "0"});
#line 106
  testRunner.And("the transaction types for the payments for provider a are:", ((string)(null)), table412, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("884_AC02 DAS learner, commitment cancelled after threshold date but before census" +
            " date, paid for incentive but not for on-prog")]
        public virtual void _884_AC02DASLearnerCommitmentCancelledAfterThresholdDateButBeforeCensusDatePaidForIncentiveButNotForOn_Prog()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("884_AC02 DAS learner, commitment cancelled after threshold date but before census" +
                    " date, paid for incentive but not for on-prog", ((string[])(null)));
#line 114
this.ScenarioSetup(scenarioInfo);
#line 116
        testRunner.Given("levy balance > agreed price for all months", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table413 = new TechTalk.SpecFlow.Table(new string[] {
                        "commitment Id",
                        "version Id",
                        "ULN",
                        "start date",
                        "end date",
                        "agreed price",
                        "status",
                        "effective from",
                        "effective to"});
            table413.AddRow(new string[] {
                        "1",
                        "1-001",
                        "learner a",
                        "15/08/2017",
                        "01/08/2018",
                        "15000",
                        "active",
                        "15/08/2017",
                        "20/11/2017"});
            table413.AddRow(new string[] {
                        "1",
                        "1-002",
                        "learner a",
                        "15/08/2017",
                        "01/08/2018",
                        "15000",
                        "cancelled",
                        "21/11/2017",
                        "01/08/2018"});
#line 117
  testRunner.And("the following commitments exist:", ((string)(null)), table413, "And ");
#line hidden
            TechTalk.SpecFlow.Table table414 = new TechTalk.SpecFlow.Table(new string[] {
                        "learner type",
                        "agreed price",
                        "start date",
                        "planned end date",
                        "actual end date",
                        "completion status"});
            table414.AddRow(new string[] {
                        "16-18 programme only DAS",
                        "15000",
                        "15/08/2017",
                        "20/08/2018",
                        "",
                        "continuing"});
#line 122
  testRunner.When("an ILR file is submitted with the following data:", ((string)(null)), table414, "When ");
#line hidden
            TechTalk.SpecFlow.Table table415 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "08/17",
                        "09/17",
                        "10/17",
                        "11/17",
                        "12/17"});
            table415.AddRow(new string[] {
                        "Provider Earned Total",
                        "1000",
                        "1000",
                        "1000",
                        "2000",
                        "1000"});
            table415.AddRow(new string[] {
                        "Provider Earned from SFA",
                        "1000",
                        "1000",
                        "1000",
                        "2000",
                        "1000"});
            table415.AddRow(new string[] {
                        "Provider Earned from Employer",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
            table415.AddRow(new string[] {
                        "Provider Paid by SFA",
                        "0",
                        "1000",
                        "1000",
                        "1000",
                        "1000"});
            table415.AddRow(new string[] {
                        "Payment due from Employer",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
            table415.AddRow(new string[] {
                        "Levy account debited",
                        "0",
                        "1000",
                        "1000",
                        "1000",
                        "0"});
            table415.AddRow(new string[] {
                        "SFA Levy employer budget",
                        "1000",
                        "1000",
                        "1000",
                        "0",
                        "0"});
            table415.AddRow(new string[] {
                        "SFA Levy co-funding budget",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
#line 126
  testRunner.Then("the provider earnings and payments break down as follows:", ((string)(null)), table415, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table416 = new TechTalk.SpecFlow.Table(new string[] {
                        "Payment type",
                        "09/17",
                        "10/17",
                        "11/17",
                        "12/17"});
            table416.AddRow(new string[] {
                        "On-program",
                        "1000",
                        "1000",
                        "1000",
                        "0"});
            table416.AddRow(new string[] {
                        "Employer 16-18 incentive",
                        "0",
                        "0",
                        "0",
                        "500"});
            table416.AddRow(new string[] {
                        "Provider 16-18 incentive",
                        "0",
                        "0",
                        "0",
                        "500"});
#line 137
  testRunner.And("the transaction types for the payments for provider a are:", ((string)(null)), table416, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("884_AC03 DAS learner, commitment cancelled from begining and a new commitment is " +
            "created from start with a lower price, it should reconcile price difference and " +
            "pay correct incentives")]
        public virtual void _884_AC03DASLearnerCommitmentCancelledFromBeginingAndANewCommitmentIsCreatedFromStartWithALowerPriceItShouldReconcilePriceDifferenceAndPayCorrectIncentives()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("884_AC03 DAS learner, commitment cancelled from begining and a new commitment is " +
                    "created from start with a lower price, it should reconcile price difference and " +
                    "pay correct incentives", ((string[])(null)));
#line 144
this.ScenarioSetup(scenarioInfo);
#line 148
        testRunner.Given("levy balance > agreed price for all months", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table417 = new TechTalk.SpecFlow.Table(new string[] {
                        "commitment Id",
                        "version Id",
                        "ULN",
                        "start date",
                        "end date",
                        "standard code",
                        "agreed price",
                        "status",
                        "effective from",
                        "effective to"});
            table417.AddRow(new string[] {
                        "1",
                        "1-001",
                        "learner a",
                        "15/08/2017",
                        "01/08/2018",
                        "50",
                        "15000",
                        "cancelled",
                        "15/08/2017",
                        ""});
            table417.AddRow(new string[] {
                        "2",
                        "2-001",
                        "learner a",
                        "15/08/2017",
                        "01/08/2018",
                        "50",
                        "1",
                        "active",
                        "15/08/2017",
                        ""});
#line 149
  testRunner.And("the following commitments exist:", ((string)(null)), table417, "And ");
#line hidden
            TechTalk.SpecFlow.Table table418 = new TechTalk.SpecFlow.Table(new string[] {
                        "ULN",
                        "start date",
                        "aim sequence number",
                        "standard code",
                        "completion status",
                        "agreed price"});
            table418.AddRow(new string[] {
                        "learner a",
                        "15/08/2017",
                        "1",
                        "50",
                        "continuing",
                        "15000"});
#line 154
     testRunner.And("following learning has been recorded for previous payments:", ((string)(null)), table418, "And ");
#line hidden
            TechTalk.SpecFlow.Table table419 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "08/17",
                        "09/17",
                        "10/17"});
            table419.AddRow(new string[] {
                        "Provider Earned Total",
                        "1000",
                        "1000",
                        "0"});
            table419.AddRow(new string[] {
                        "Provider Earned from SFA",
                        "1000",
                        "1000",
                        "00"});
            table419.AddRow(new string[] {
                        "Provider Earned from Employer",
                        "0",
                        "0",
                        "0"});
            table419.AddRow(new string[] {
                        "Provider Paid by SFA",
                        "0",
                        "1000",
                        "1000"});
            table419.AddRow(new string[] {
                        "Payment due from Employer",
                        "0",
                        "0",
                        "0"});
            table419.AddRow(new string[] {
                        "Levy account debited",
                        "0",
                        "1000",
                        "1000"});
            table419.AddRow(new string[] {
                        "SFA Levy employer budget",
                        "1000",
                        "1000",
                        "00"});
            table419.AddRow(new string[] {
                        "SFA Levy co-funding budget",
                        "0",
                        "0",
                        "0"});
            table419.AddRow(new string[] {
                        "SFA Levy additional payments budget",
                        "0",
                        "0",
                        "0"});
            table419.AddRow(new string[] {
                        "SFA non-Levy co-funding budget",
                        "0",
                        "0",
                        "0"});
#line 158
  testRunner.And("the following earnings and payments have been made to the provider A for learner " +
                    "a:", ((string)(null)), table419, "And ");
#line hidden
            TechTalk.SpecFlow.Table table420 = new TechTalk.SpecFlow.Table(new string[] {
                        "learner type",
                        "agreed price",
                        "standard code",
                        "start date",
                        "planned end date",
                        "actual end date",
                        "completion status"});
            table420.AddRow(new string[] {
                        "16-18 programme only DAS",
                        "1",
                        "50",
                        "15/08/2017",
                        "20/08/2018",
                        "",
                        "continuing"});
#line 171
  testRunner.When("an ILR file is submitted for the first time on 30/10/17 with the following data:", ((string)(null)), table420, "When ");
#line hidden
            TechTalk.SpecFlow.Table table421 = new TechTalk.SpecFlow.Table(new string[] {
                        "Payment type",
                        "08/17",
                        "09/17",
                        "10/17",
                        "11/17",
                        "12/17"});
            table421.AddRow(new string[] {
                        "On-program",
                        "commitment 1 v1-001",
                        "commitment 1 v1-001",
                        "commitment 2 v2-001",
                        "commitment 2 v2-001",
                        "commitment 2 v2-001"});
            table421.AddRow(new string[] {
                        "Completion",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table421.AddRow(new string[] {
                        "Employer 16-18 incentive",
                        "",
                        "",
                        "",
                        "commitment 2 v2-001",
                        ""});
            table421.AddRow(new string[] {
                        "Provider 16-18 incentive",
                        "",
                        "",
                        "",
                        "commitment 2 v2-001",
                        ""});
            table421.AddRow(new string[] {
                        "Provider learning support",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table421.AddRow(new string[] {
                        "English and maths on programme",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table421.AddRow(new string[] {
                        "English and maths Balancing",
                        "",
                        "",
                        "",
                        "",
                        ""});
#line 176
  testRunner.Then("the data lock status will be as follows:", ((string)(null)), table421, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table422 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "08/17",
                        "09/17",
                        "10/17",
                        "11/17",
                        "12/17"});
            table422.AddRow(new string[] {
                        "Provider Earned Total",
                        "0.07",
                        "0.07",
                        "0.07",
                        "1000.07",
                        "0.07"});
            table422.AddRow(new string[] {
                        "Provider Earned from SFA",
                        "0.07",
                        "0.07",
                        "0.07",
                        "1000.07",
                        "0.07"});
            table422.AddRow(new string[] {
                        "Provider Earned from Employer",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
            table422.AddRow(new string[] {
                        "Provider Paid by SFA",
                        "0",
                        "1000",
                        "1000",
                        "0.07",
                        "1000.07"});
            table422.AddRow(new string[] {
                        "Refund taken by SFA",
                        "0",
                        "0",
                        "0",
                        "-1999.87",
                        "0"});
            table422.AddRow(new string[] {
                        "Payment due from Employer",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
            table422.AddRow(new string[] {
                        "Levy account debited",
                        "0",
                        "1000",
                        "1000",
                        "0.07",
                        "0.07"});
            table422.AddRow(new string[] {
                        "Levy account credited",
                        "0",
                        "0",
                        "0",
                        "1999.87",
                        "0"});
            table422.AddRow(new string[] {
                        "SFA Levy employer budget",
                        "0.07",
                        "0.07",
                        "0.07",
                        "0.07",
                        "0.07"});
            table422.AddRow(new string[] {
                        "SFA Levy co-funding budget",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
#line 186
  testRunner.And("the provider earnings and payments break down as follows:", ((string)(null)), table422, "And ");
#line hidden
            TechTalk.SpecFlow.Table table423 = new TechTalk.SpecFlow.Table(new string[] {
                        "Payment type",
                        "09/17",
                        "10/17",
                        "11/17",
                        "12/17"});
            table423.AddRow(new string[] {
                        "On-program",
                        "1000",
                        "1000",
                        "1000",
                        "0"});
            table423.AddRow(new string[] {
                        "Employer 16-18 incentive",
                        "0",
                        "0",
                        "0",
                        "500"});
            table423.AddRow(new string[] {
                        "Provider 16-18 incentive",
                        "0",
                        "0",
                        "0",
                        "500"});
#line 199
  testRunner.And("the transaction types for the payments for provider a are:", ((string)(null)), table423, "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
